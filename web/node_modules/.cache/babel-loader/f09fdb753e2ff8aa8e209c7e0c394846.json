{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Role\",\n  data: function data() {\n    return {\n      tableData: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 5,\n      name: \"\",\n      form: {},\n      dialogFormVisible: false,\n      menuDialogVis: false,\n      multipleSelection: [],\n      menuData: [],\n      props: {\n        label: 'name'\n      },\n      expends: [],\n      checks: [],\n      roleId: 0,\n      roleFlag: '',\n      ids: []\n    };\n  },\n  created: function created() {\n    this.load();\n  },\n  methods: {\n    rowClass: function rowClass() {\n      return \"text-align:center\";\n    },\n    load: function load() {\n      var _this = this;\n\n      this.request.get(\"/role/page\", {\n        params: {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          name: this.name\n        }\n      }).then(function (res) {\n        _this.tableData = res.data.records;\n        _this.total = res.data.total;\n      }); // this.request.get(\"/menu/ids\").then(r => {\n      //   this.ids = r.data\n      // })\n    },\n    save: function save() {\n      var _this2 = this;\n\n      this.request.post(\"/role\", this.form).then(function (res) {\n        if (res.code === 200) {\n          _this2.$message.success(\"Successfully saved\");\n\n          _this2.dialogFormVisible = false;\n\n          _this2.load();\n        } else {\n          _this2.$message.error(\"Failed to save\");\n        }\n      });\n    },\n    saveRoleMenu: function saveRoleMenu() {\n      var _this3 = this;\n\n      console.log(this.roleId);\n      this.request.post(\"/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys()).then(function (res) {\n        if (res.code === 200) {\n          _this3.$message.success(\"Binding succeeded\");\n\n          _this3.menuDialogVis = false;\n          操作管理员角色后需要重新登录;\n\n          if (_this3.roleKey === 'ROLE_ADMIN') {\n            _this3.$store.commit(\"logout\");\n          }\n        } else {\n          _this3.$message.error(res.msg);\n        }\n      });\n    },\n    handleAdd: function handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {};\n    },\n    handleEdit: function handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.dialogFormVisible = true;\n    },\n    del: function del(id) {\n      var _this4 = this;\n\n      this.request.delete(\"/role/\" + id).then(function (res) {\n        if (res.code === 200) {\n          _this4.$message.success(\"Successfully deleted\");\n\n          _this4.load();\n        } else {\n          _this4.$message.error(\"Failed to delete\");\n        }\n      });\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    delBatch: function delBatch() {\n      var _this5 = this;\n\n      var ids = this.multipleSelection.map(function (v) {\n        return v.id;\n      });\n      this.request.post(\"/role/del/batch\", ids).then(function (res) {\n        if (res.code === 200) {\n          _this5.$message.success(\"Successfully deleted\");\n\n          _this5.load();\n        } else {\n          _this5.$message.error(\"Failed to delete\");\n        }\n      });\n    },\n    reset: function reset() {\n      this.name = \"\";\n      this.load();\n    },\n    handleSizeChange: function handleSizeChange(pageSize) {\n      console.log(pageSize);\n      this.pageSize = pageSize;\n      this.load();\n    },\n    handleCurrentChange: function handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.load();\n    },\n    cancel: function cancel() {\n      this.$message.warning(\"Operation successfully canceled\");\n    },\n    formCancel: function formCancel() {\n      this.dialogFormVisible = false;\n      this.$message.warning(\"Form submission canceled\");\n    },\n    dialogCancel: function dialogCancel() {\n      this.menuDialogVis = false;\n      this.$message.warning(\"You canceled this operation\");\n    },\n    selectMenu: function selectMenu(roleId) {\n      var _this6 = this;\n\n      this.menuDialogVis = true;\n      this.roleId = roleId;\n      this.request.get(\"/menu\").then(function (res) {\n        _this6.menuData = res.data; //Process the menu data returned from the background into an id array\n\n        _this6.expends = _this6.menuData.map(function (v) {\n          return v.id;\n        });\n      });\n      this.request.get(\"/role/roleMenu/\" + roleId).then(function (res) {\n        _this6.checks = res.data;\n      });\n    } // async selectMenu(role) {\n    //   this.roleId = role.id\n    //   this.roleFlag = role.flag\n    //   // request menu data\n    //   this.request.get(\"/menu\").then(res => {\n    //     this.menuData = res.data\n    //     // Process the menu data returned from the background into an id array\n    //     this.expends = this.menuData.map(v => v.id)\n    //   })\n    //   this.request.get(\"/role/roleMenu/\" + this.roleId).then(res => {\n    //     this.checks = res.data\n    //     this.ids.forEach(id => {\n    //       if (!this.checks.includes(id)) {\n    //         // 可能会报错：Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'setChecked')\n    //         this.$nextTick(() => {\n    //           this.$refs.tree.setChecked(id, false)\n    //         })\n    //       }\n    //     })\n    //     this.menuDialogVis = true\n    //   })\n    // },\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;EACAA,YADA;EAEAC,IAFA,kBAEA;IACA;MACAC,aADA;MAEAC,QAFA;MAGAC,cAHA;MAIAC,WAJA;MAKAL,QALA;MAMAM,QANA;MAOAC,wBAPA;MASAC,oBATA;MAUAC,qBAVA;MAWAC,YAXA;MAYAC;QACAC;MADA,CAZA;MAeAC,WAfA;MAgBAC,UAhBA;MAiBAC,SAjBA;MAkBAC,YAlBA;MAmBAC;IAnBA;EAqBA,CAxBA;EAyBAC,OAzBA,qBAyBA;IACA;EACA,CA3BA;EA4BAC;IACAC,QADA,sBACA;MACA;IACA,CAHA;IAIAC,IAJA,kBAIA;MAAA;;MACA;QACAC;UACAlB,6BADA;UAEAC,uBAFA;UAGAL;QAHA;MADA,GAMAuB,IANA,CAMA;QACA;QACA;MACA,CATA,EADA,CAYA;MACA;MACA;IAEA,CApBA;IAqBAC,IArBA,kBAqBA;MAAA;;MACA;QACA;UACA;;UACA;;UACA;QACA,CAJA,MAIA;UACA;QACA;MACA,CARA;IASA,CA/BA;IAgCAC,YAhCA,0BAgCA;MAAA;;MACAC;MACA;QACA;UACA;;UACA;UAEAC;;UACA;YACA;UACA;QAEA,CATA,MASA;UACA;QACA;MACA,CAbA;IAcA,CAhDA;IAiDAC,SAjDA,uBAiDA;MACA;MACA;IACA,CApDA;IAqDAC,UArDA,sBAqDAC,GArDA,EAqDA;MACA;MACA;IACA,CAxDA;IAyDAC,GAzDA,eAyDAC,EAzDA,EAyDA;MAAA;;MACA;QACA;UACA;;UACA;QACA,CAHA,MAGA;UACA;QACA;MACA,CAPA;IAQA,CAlEA;IAmEAC,qBAnEA,iCAmEAC,GAnEA,EAmEA;MACAR;MACA;IACA,CAtEA;IAuEAS,QAvEA,sBAuEA;MAAA;;MACA;QAAA;MAAA;MACA;QACA;UACA;;UACA;QACA,CAHA,MAGA;UACA;QACA;MACA,CAPA;IAQA,CAjFA;IAkFAC,KAlFA,mBAkFA;MACA;MACA;IACA,CArFA;IAsFAC,gBAtFA,4BAsFAhC,QAtFA,EAsFA;MACAqB;MACA;MACA;IACA,CA1FA;IA2FAY,mBA3FA,+BA2FAlC,WA3FA,EA2FA;MACA;MACA;IACA,CA9FA;IA+FAmC,MA/FA,oBA+FA;MACA;IACA,CAjGA;IAkGAC,UAlGA,wBAkGA;MACA;MACA;IACA,CArGA;IAsGAC,YAtGA,0BAsGA;MACA;MACA;IACA,CAzGA;IA0GAC,UA1GA,sBA0GA3B,MA1GA,EA0GA;MAAA;;MACA;MACA;MAEA;QACA,2BADA,CAGA;;QACA;UAAA;QAAA;MACA,CALA;MAOA;QACA;MACA,CAFA;IAGA,CAxHA,CAyHA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAjJA;AA5BA","names":["name","data","tableData","total","currentPage","pageSize","form","dialogFormVisible","menuDialogVis","multipleSelection","menuData","props","label","expends","checks","roleId","roleFlag","ids","created","methods","rowClass","load","params","then","save","saveRoleMenu","console","操作管理员角色后需要重新登录","handleAdd","handleEdit","row","del","id","handleSelectionChange","val","delBatch","reset","handleSizeChange","handleCurrentChange","cancel","formCancel","dialogCancel","selectMenu"],"sourceRoot":"src/views","sources":["Role.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"margin: 10px 0\">\r\n      <el-input style=\"width: 200px\" placeholder=\"Please enter the name\" suffix-icon=\"el-icon-search\" v-model=\"name\"></el-input>\r\n      <el-button class=\"ml-5\" type=\"primary\" @click=\"load\">Search</el-button>\r\n      <el-button type=\"warning\" @click=\"reset\">Reset</el-button>\r\n    </div>\r\n\r\n    <div style=\"margin: 10px 0\">\r\n      <el-button type=\"primary\" @click=\"handleAdd\">Add a new role <i class=\"el-icon-circle-plus-outline\"></i></el-button>\r\n      <el-popconfirm\r\n          class=\"ml-5\"\r\n          confirm-button-text='DELETE'\r\n          cancel-button-text='CANCEL'\r\n          icon=\"el-icon-info\"\r\n          icon-color=\"red\"\r\n          title=\"Are you sure you want to delete these data?\"\r\n          @cancel=\"cancel\"\r\n          @confirm=\"delBatch\"\r\n      >\r\n        <el-button type=\"danger\" slot=\"reference\">Delete in bulk <i class=\"el-icon-remove-outline\"></i></el-button>\r\n      </el-popconfirm>\r\n    </div>\r\n\r\n    <el-table \r\n      :data=\"tableData\" \r\n      :default-sort = \"{prop: 'id', order: 'descending'}\" \r\n      border \r\n      stripe \r\n      :header-cell-style=\"{ textAlign: 'center', background:'beige' }\" \r\n      :cell-style=\"rowClass\"\r\n      @selection-change=\"handleSelectionChange\">\r\n\r\n      <div slot=\"empty\" style=\"text-align: left;\">\r\n        <el-empty description=\"Sorry, there is no data you are looking for\" />\r\n      </div>\r\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n      <!-- <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column> -->\r\n      <el-table-column prop=\"name\" label=\"Role Name\"></el-table-column>\r\n      <el-table-column prop=\"roleKey\" label=\"Role Key\"></el-table-column>\r\n      <el-table-column prop=\"description\" label=\"Description\"></el-table-column>\r\n      <el-table-column label=\"Operation\"  width=\"350\" align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"info\" @click=\"selectMenu(scope.row.id)\">Assign menu <i class=\"el-icon-menu\"></i></el-button>\r\n          <el-button type=\"success\" @click=\"handleEdit(scope.row)\">Edit <i class=\"el-icon-edit\"></i></el-button>\r\n          <el-popconfirm\r\n              class=\"ml-5\"\r\n              confirm-button-text='DELETE'\r\n              cancel-button-text='CANCEL'\r\n              icon=\"el-icon-info\"\r\n              icon-color=\"red\"\r\n              title=\"Are you sure to delete?\"\r\n              @confirm=\"del(scope.row.id)\"\r\n              @cancel=\"cancel\"\r\n          >\r\n            <el-button type=\"danger\" slot=\"reference\">Delete <i class=\"el-icon-remove-outline\"></i></el-button>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <div style=\"padding: 10px 0\">\r\n      <el-pagination\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n          :current-page=\"currentPage\"\r\n          :page-sizes=\"[5,10,20]\"\r\n          :page-size=\"pageSize\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\">\r\n      </el-pagination>\r\n    </div>\r\n\r\n    <el-dialog title=\"Role Info\" :visible.sync=\"dialogFormVisible\" width=\"30%\" >\r\n      <el-form label-width=\"100px\" size=\"small\">\r\n        <el-form-item label=\"Role Name\">\r\n          <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Role Key\">\r\n          <el-input v-model=\"form.roleKey\" placeholder=\"Format: ROLE_XXX\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Description\">\r\n          <el-input v-model=\"form.description\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"formCancel\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">Save</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog title=\"Menu Assignment\" :visible.sync=\"menuDialogVis\" width=\"30%\">\r\n      <el-tree\r\n          :props=\"props\"\r\n          :data=\"menuData\"\r\n          :show-checkbox=\"true\"\r\n          node-key=\"id\"\r\n          ref=\"tree\"\r\n          :default-expanded-keys=\"expends\"\r\n          :default-checked-keys=\"checks\">\r\n         <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n            <span><i :class=\"data.icon\"></i> {{ data.name }}</span>\r\n         </span>\r\n      </el-tree>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogCancel\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"saveRoleMenu\">Save</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"Role\",\r\n    data() {\r\n      return {\r\n        tableData: [],\r\n        total: 0,\r\n        currentPage: 1,\r\n        pageSize: 5,\r\n        name: \"\",\r\n        form: {},\r\n        dialogFormVisible: false,\r\n\r\n        menuDialogVis: false,\r\n        multipleSelection: [],\r\n        menuData: [],\r\n        props: {\r\n          label: 'name',\r\n        },\r\n        expends: [],\r\n        checks: [],\r\n        roleId: 0,\r\n        roleFlag: '',\r\n        ids: [],\r\n      }\r\n    },\r\n    created() {\r\n      this.load()\r\n    },\r\n    methods: {\r\n      rowClass(){\r\n        return \"text-align:center\"\r\n      },\r\n      load() {\r\n        this.request.get(\"/role/page\", {\r\n          params: {\r\n            currentPage: this.currentPage,\r\n            pageSize: this.pageSize,\r\n            name: this.name,\r\n          }\r\n        }).then(res => {\r\n          this.tableData = res.data.records\r\n          this.total = res.data.total\r\n        })\r\n\r\n        // this.request.get(\"/menu/ids\").then(r => {\r\n        //   this.ids = r.data\r\n        // })\r\n\r\n      },\r\n      save() {\r\n        this.request.post(\"/role\", this.form).then(res => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"Successfully saved\")\r\n            this.dialogFormVisible = false\r\n            this.load()\r\n          } else {\r\n            this.$message.error(\"Failed to save\")\r\n          }\r\n        })\r\n      },\r\n      saveRoleMenu() {\r\n        console.log(this.roleId)\r\n        this.request.post(\"/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys()).then(res => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"Binding succeeded\")\r\n            this.menuDialogVis = false\r\n\r\n            操作管理员角色后需要重新登录\r\n            if (this.roleKey === 'ROLE_ADMIN') {\r\n              this.$store.commit(\"logout\")\r\n            }\r\n\r\n          } else {\r\n            this.$message.error(res.msg)\r\n          }\r\n        })\r\n      },\r\n      handleAdd() {\r\n        this.dialogFormVisible = true\r\n        this.form = {}\r\n      },\r\n      handleEdit(row) {\r\n        this.form = JSON.parse(JSON.stringify(row))\r\n        this.dialogFormVisible = true\r\n      },\r\n      del(id) {\r\n        this.request.delete(\"/role/\" + id).then(res => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"Successfully deleted\")\r\n            this.load()\r\n          } else {\r\n            this.$message.error(\"Failed to delete\")\r\n          }\r\n        })\r\n      },\r\n      handleSelectionChange(val) {\r\n        console.log(val)\r\n        this.multipleSelection = val\r\n      },\r\n      delBatch() {\r\n        let ids = this.multipleSelection.map(v => v.id)\r\n        this.request.post(\"/role/del/batch\", ids).then(res => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"Successfully deleted\")\r\n            this.load()\r\n          } else {\r\n            this.$message.error(\"Failed to delete\")\r\n          }\r\n        })\r\n      },\r\n      reset() {\r\n        this.name = \"\"\r\n        this.load()\r\n      },\r\n      handleSizeChange(pageSize) {\r\n        console.log(pageSize)\r\n        this.pageSize = pageSize\r\n        this.load()\r\n      },\r\n      handleCurrentChange(currentPage) {\r\n        this.currentPage = currentPage\r\n        this.load()\r\n      },\r\n      cancel(){\r\n        this.$message.warning(\"Operation successfully canceled\")\r\n      },\r\n      formCancel(){\r\n        this.dialogFormVisible = false\r\n        this.$message.warning(\"Form submission canceled\")\r\n      },\r\n      dialogCancel(){\r\n        this.menuDialogVis = false\r\n        this.$message.warning(\"You canceled this operation\")\r\n      },\r\n      selectMenu(roleId){\r\n        this.menuDialogVis = true\r\n        this.roleId = roleId\r\n\r\n        this.request.get(\"/menu\").then(res => {\r\n          this.menuData = res.data\r\n\r\n          //Process the menu data returned from the background into an id array\r\n          this.expends = this.menuData.map(v => v.id) \r\n        })\r\n\r\n        this.request.get(\"/role/roleMenu/\" + roleId).then(res => {\r\n          this.checks = res.data \r\n        })\r\n      },\r\n      // async selectMenu(role) {\r\n      //   this.roleId = role.id\r\n      //   this.roleFlag = role.flag\r\n\r\n      //   // request menu data\r\n      //   this.request.get(\"/menu\").then(res => {\r\n      //     this.menuData = res.data\r\n\r\n      //     // Process the menu data returned from the background into an id array\r\n      //     this.expends = this.menuData.map(v => v.id)\r\n      //   })\r\n\r\n      //   this.request.get(\"/role/roleMenu/\" + this.roleId).then(res => {\r\n      //     this.checks = res.data\r\n      //     this.ids.forEach(id => {\r\n      //       if (!this.checks.includes(id)) {\r\n      //         // 可能会报错：Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'setChecked')\r\n      //         this.$nextTick(() => {\r\n      //           this.$refs.tree.setChecked(id, false)\r\n      //         })\r\n      //       }\r\n      //     })\r\n      //     this.menuDialogVis = true\r\n      //   })\r\n      // },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n</style>"]},"metadata":{},"sourceType":"module"}