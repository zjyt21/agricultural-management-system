{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import {setRoutes} from \"@/router\";\nexport default {\n  name: \"Register\",\n  data: function data() {\n    return {\n      user: {},\n      rules: {\n        username: [{\n          required: true,\n          message: 'Username',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 10,\n          message: 'Username should be between 2 and 5 characters long',\n          trigger: 'blur'\n        }],\n        nickname: [{\n          required: true,\n          message: 'Nickname',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 10,\n          message: 'Nickname should be between 2 and 5 characters long',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Password',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 20,\n          message: 'Length should be between 1 and 20 characters',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: 'Confirm password',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 20,\n          message: 'Length should be between 1 and 20 characters',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    register: function register() {\n      var _this = this;\n\n      this.$refs['userForm'].validate(function (valid) {\n        if (valid) {\n          // 表单校验合法\n          if (_this.user.password !== _this.user.confirmPassword) {\n            _this.$message.error(\"Password does not match\");\n\n            return false;\n          }\n\n          _this.request.post(\"/user/register\", _this.user).then(function (res) {\n            if (res.code == 200) {\n              _this.$message.success(\"Registration success\");\n            } else {\n              _this.$message.error(res.msg);\n            }\n          });\n        }\n      }); // this.$refs['userForm'].validate((valid) => {\n      //   if (valid) {  // 表单校验合法\n      //     this.request.post(\"/user/login\", this.user).then(res => {\n      //       if (res.code === '200') {\n      //         localStorage.setItem(\"user\", JSON.stringify(res.data))  // 存储用户信息到浏览器\n      //         localStorage.setItem(\"menus\", JSON.stringify(res.data.menus))  // 存储用户信息到浏览器\n      //         // 动态设置当前用户的路由\n      //         setRoutes()\n      //         this.$message.success(\"登录成功\")\n      //         if (res.data.role === 'ROLE_STUDENT') {\n      //           this.$router.push(\"/front/home\")\n      //         } else {\n      //           this.$router.push(\"/\")\n      //         }\n      //       } else {\n      //         this.$message.error(res.msg)\n      //       }\n      //     })\n      //   }\n      // });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AAEA;EACAA,gBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,QADA;MAEAC;QACAC,WACA;UAAAC;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA,CADA;QAKAG,WACA;UAAAL;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA,CALA;QASAI,WACA;UAAAN;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA,CATA;QAaAK,kBACA;UAAAP;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA;MAbA;IAFA;EAqBA,CAxBA;EAyBAM;IACAC,QADA,sBACA;MAAA;;MACA;QACA;UAAA;UACA;YACA;;YACA;UACA;;UACA;YACA;cACA;YACA,CAFA,MAEA;cACA;YACA;UACA,CANA;QAOA;MACA,CAdA,EADA,CAgBA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EAtCA;AAzBA","names":["name","data","user","rules","username","required","message","trigger","min","max","nickname","password","confirmPassword","methods","register"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper\">\r\n    <div style=\"margin: 100px auto; background-color: #fff; width: 350px; height: 450px; padding: 20px; border-radius: 10px\">\r\n      <div style=\"height: 50px; text-align: center\">\r\n        <img src=\"../assets/logo.png\"  height=\"100%\" alt=\"\">\r\n      </div>\r\n      <div style=\"margin: 20px 0; text-align: center; font-size: 24px\"><b>Register</b></div>\r\n      <el-form :model=\"user\" :rules=\"rules\" ref=\"userForm\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input \r\n            placeholder=\"Please enter username (unmodified)\"\r\n            size=\"medium\" \r\n            style=\"margin: 5px 0\" \r\n            prefix-icon=\"el-icon-user\" \r\n            v-model=\"user.username\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"nickname\">\r\n          <el-input\r\n          placeholder=\"Please enter nickname\" \r\n            size=\"medium\" \r\n            style=\"margin: 5px 0\" \r\n            prefix-icon=\"el-icon-user-solid\" \r\n            v-model=\"user.nickname\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input \r\n            placeholder=\"Please enter password\"\r\n            size=\"medium\" \r\n            style=\"margin: 5px 0\" \r\n            prefix-icon=\"el-icon-lock\" \r\n            show-password\r\n            v-model=\"user.password\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"confirmPassword\">\r\n          <el-input\r\n          placeholder=\"Please confirm password\" \r\n            size=\"medium\" \r\n            style=\"margin: 5px 0\" \r\n            prefix-icon=\"el-icon-lock\" \r\n            show-password\r\n            v-model=\"user.confirmPassword\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item style=\"margin: 10px 0; text-align: right\">\r\n          <el-button type=\"warning\" size=\"small\" autocomplete=\"off\" @click=\"$router.push('/login')\">Back to login</el-button>\r\n          <el-button type=\"primary\" size=\"small\" autocomplete=\"off\" @click=\"register\">Register</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      \r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import {setRoutes} from \"@/router\";\r\n\r\nexport default {\r\n  name: \"Register\",\r\n  data() {\r\n    return {\r\n      user: {},\r\n      rules: {\r\n        username: [\r\n          {required: true, message: 'Username', trigger: 'blur'},\r\n          {min: 2, max: 10, message: 'Username should be between 2 and 5 characters long', trigger: 'blur'}\r\n        ],\r\n        nickname: [\r\n          {required: true, message: 'Nickname', trigger: 'blur'},\r\n          {min: 2, max: 10, message: 'Nickname should be between 2 and 5 characters long', trigger: 'blur'}\r\n        ],\r\n        password: [\r\n          {required: true, message: 'Password', trigger: 'blur'},\r\n          {min: 1, max: 20, message: 'Length should be between 1 and 20 characters', trigger: 'blur'}\r\n        ],\r\n        confirmPassword: [\r\n          {required: true, message: 'Confirm password', trigger: 'blur'},\r\n          {min: 1, max: 20, message: 'Length should be between 1 and 20 characters', trigger: 'blur'}\r\n        ],\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    register() {\r\n      this.$refs['userForm'].validate((valid) => {\r\n          if (valid) {  // 表单校验合法\r\n            if(this.user.password !== this.user.confirmPassword){\r\n              this.$message.error(\"Password does not match\")\r\n              return false\r\n            }\r\n            this.request.post(\"/user/register\", this.user).then(res => {\r\n              if(res.code == 200){\r\n                this.$message.success(\"Registration success\")\r\n              }else{\r\n                this.$message.error(res.msg)\r\n              }\r\n            })\r\n          }\r\n      });\r\n      // this.$refs['userForm'].validate((valid) => {\r\n      //   if (valid) {  // 表单校验合法\r\n      //     this.request.post(\"/user/login\", this.user).then(res => {\r\n      //       if (res.code === '200') {\r\n      //         localStorage.setItem(\"user\", JSON.stringify(res.data))  // 存储用户信息到浏览器\r\n      //         localStorage.setItem(\"menus\", JSON.stringify(res.data.menus))  // 存储用户信息到浏览器\r\n      //         // 动态设置当前用户的路由\r\n      //         setRoutes()\r\n      //         this.$message.success(\"登录成功\")\r\n\r\n      //         if (res.data.role === 'ROLE_STUDENT') {\r\n      //           this.$router.push(\"/front/home\")\r\n      //         } else {\r\n      //           this.$router.push(\"/\")\r\n      //         }\r\n      //       } else {\r\n      //         this.$message.error(res.msg)\r\n      //       }\r\n      //     })\r\n      //   }\r\n      // });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: 100vh;\r\n    background-image: linear-gradient(to bottom right, #FC466B, #3F5EFB);\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}