{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nexport default {\n  name: \"Soil\",\n  data: function data() {\n    return {\n      tableData: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 5,\n      form: {},\n      multipleSelection: [],\n      dialogFormVisible: false,\n      rules: {\n        date: [{\n          required: true,\n          message: 'Please choose the date',\n          trigger: 'blur'\n        }],\n        compaction: [{\n          required: true,\n          message: 'Please input the force to penetrate the soil',\n          trigger: 'blur'\n        }],\n        soilTemperature: [{\n          required: true,\n          message: 'Please input the soil temperature',\n          trigger: 'blur'\n        }],\n        ph: [{\n          required: true,\n          message: 'Please input the soil pH',\n          trigger: 'blur'\n        }],\n        water: [{\n          required: true,\n          message: 'Please input the water content',\n          trigger: 'blur'\n        }],\n        nitrogen: [{\n          required: true,\n          message: 'Please input the nitrogen content',\n          trigger: 'blur'\n        }],\n        phosphorus: [{\n          required: true,\n          message: 'Please input the phosphorus content',\n          trigger: 'blur'\n        }]\n      },\n      chartDateVal: [],\n      dateVal: [],\n      pickerOptions: {\n        shortcuts: [{\n          text: 'within 7 days',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'within 30 days',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'within 90 days',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      }\n    };\n  },\n  watch: {\n    dateVal: function dateVal(val) {\n      if (val == null) this.dateVal = '';\n    },\n    chartDateVal: function chartDateVal(val) {\n      if (val == null) this.chartDateVal = '';\n    }\n  },\n  created: function created() {\n    this.loadPage();\n  },\n  // mounted() {\n  //   this.chartDateVal[0] = this.getFormatDate(1)\n  //   this.chartDateVal[1] = this.getFormatDate(0)\n  //   this.getChart()\n  // },\n  methods: {\n    getFormatDate: function getFormatDate(offset) {\n      var date = new Date();\n      var seperator1 = '-';\n      var year = date.getFullYear() - offset;\n      var month = date.getMonth() + 1;\n      var strDate = date.getDate();\n\n      if (month >= 1 && month <= 9) {\n        month = '0' + month;\n      }\n\n      if (strDate >= 0 && strDate <= 9) {\n        strDate = '0' + strDate;\n      }\n\n      var currentdate = year + seperator1 + month + seperator1 + strDate;\n      return currentdate;\n    },\n    rowClass: function rowClass() {\n      return \"text-align:center\";\n    },\n    loadPage: function loadPage() {\n      var _this = this;\n\n      this.request.get(\"/soil/page\", {\n        params: {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          beginDate: this.dateVal[0],\n          endDate: this.dateVal[1]\n        }\n      }).then(function (res) {\n        _this.tableData = res.data.records;\n        _this.total = res.data.total;\n        var maxPage = parseInt((_this.total - 1) / _this.pageSize + 1);\n\n        if (_this.currentPage > maxPage) {\n          _this.currentPage = maxPage;\n        }\n      });\n    },\n    handleSizeChange: function handleSizeChange(pageSize) {\n      this.pageSize = pageSize;\n      this.loadPage();\n    },\n    handleCurrentChange: function handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.loadPage();\n    },\n    handleAdd: function handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {};\n    },\n    save: function save() {\n      var _this2 = this;\n\n      this.$refs['soilForm'].validate(function (valid) {\n        if (valid) {\n          // Form validation is valid\n          _this2.request.post(\"/soil\", _this2.form).then(function (res) {\n            if (res.code === 200) {\n              _this2.$message.success(\"Successfully saved\");\n\n              _this2.dialogFormVisible = false;\n\n              _this2.loadPage();\n            } else {\n              _this2.$message.error(\"Failed to save, please try again\");\n            }\n          });\n        } else {\n          _this2.$message.error(\"Failed to save, please check that your data meets the requirements\");\n        }\n      });\n    },\n    handleEdit: function handleEdit(row) {\n      this.form = Object.assign({}, row);\n      this.dialogFormVisible = true;\n    },\n    del: function del(id) {\n      var _this3 = this;\n\n      this.request.delete(\"/soil/\" + id).then(function (res) {\n        if (res.code === 200) {\n          _this3.$message.success(\"Successfully deleted\");\n\n          _this3.loadPage();\n        } else {\n          _this3.$message.error(\"Failed to delete\");\n        }\n      });\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    delBatch: function delBatch() {\n      var _this4 = this;\n\n      var ids = this.multipleSelection.map(function (v) {\n        return v.id;\n      });\n      this.request.post(\"/soil/batchDel\", ids).then(function (res) {\n        if (res.code === 200) {\n          _this4.$message.success(\"Successfully deleted\");\n\n          _this4.loadPage();\n        } else {\n          _this4.$message.error(\"Failed to delete\");\n        }\n      });\n    },\n    reset: function reset() {\n      this.dateVal = \"\", this.currentPage = 1;\n      this.loadPage();\n    },\n    cancel: function cancel() {\n      this.$message.warning(\"Operation successfully canceled\");\n    },\n    formCancel: function formCancel() {\n      this.dialogFormVisible = false;\n      this.$message.warning(\"Form submission canceled\");\n    } // getChart() {\n    //   var priceChartDom = document.getElementById('price');\n    //   var priceChart = echarts.init(priceChartDom);\n    //   var trendChartDom = document.getElementById('trend');\n    //   var trendChart = echarts.init(trendChartDom);\n    //   var priceOption = {\n    //     title: {\n    //       text: 'Unit Price of Crops',\n    //       left: 'center',\n    //       textStyle:{\n    //         fontStyle:'normal',\n    //         fontWeight:'bold',\n    //         fontFamily:'Arial',\n    //         fontSize:25\n    //       }\n    //     },\n    //     tooltip: {\n    //       trigger: 'item',\n    //       axisPointer: {\n    //         type: 'cross'\n    //       }\n    //     },\n    //     legend: {\n    //       orient: 'horizontal',\n    //       x: 'center',\n    //       y: 'bottom'\n    //     },\n    //     grid: {\n    //       left: '5%',\n    //       right: '7%',\n    //       top:'15%',\n    //       bottom: '12%',\n    //       containLabel: true\n    //     },\n    //     toolbox: {\n    //         show: true,\n    //         //toolbox的配置项\n    //         feature: {\n    //             //辅助线的开关\n    //             mark: { show: true },\n    //             //动态类型切换\n    //             magicType: {\n    //                 show: true,\n    //                 //line为折线图，bar为柱状图\n    //                 type: ['line', 'bar']\n    //             },\n    //             //将图标保存为图片\n    //             saveAsImage: { show: true }\n    //         }\n    //     },\n    //     calculable: true,\n    //     xAxis: {\n    //       name: 'Date',\n    //       type: 'time',\n    //       //数值起始和结束两端空白策略\n    //       // boundaryGap: false,\n    //       axisLabel: {        \n    //           show: true,\n    //           textStyle: {\n    //               color: 'green',\n    //               fontSize:'13',\n    //               fontWeight:'bold'\n    //           }\n    //       },\n    //       axisLine:{\n    //         lineStyle:{\n    //           color:'black',\n    //           width:2,\n    //         }\n    //       },\n    //     },\n    //     yAxis: {\n    //       name: 'Price (GBP per ton)',\n    //       type: 'value',  \n    //       // splitLine: {\n    //       //     lineStyle: {\n    //       //       color: ['#eee']\n    //       //     }\n    //       // },\n    //       axisLabel: {        \n    //           show: true,\n    //           textStyle: {\n    //               color: 'black',\n    //               fontSize:'10',\n    //           }\n    //       },\n    //       axisLine:{\n    //         lineStyle:{\n    //           color:'black',\n    //           width:2,\n    //         }\n    //       }      \n    //     },\n    //     series: [\n    //       { name: 'paddy', data: [], type: 'line'},\n    //       { name: 'potato', data: [], type: 'line'},\n    //       { name: 'soybean', data: [], type: 'line'},\n    //       { name: 'peanut', data: [], type: 'line'},\n    //       { name: 'wheat', data: [], type: 'line'},\n    //       { name: 'barley', data: [], type: 'line'},\n    //     ]\n    //   };\n    //   var trendOption = {\n    //     title: {\n    //       text: 'Demand and Production Comparison',\n    //       subtext: 'demand minus supply (local market)',\n    //       left: 'center',\n    //       textStyle:{\n    //         fontStyle:'normal',\n    //         fontWeight:'bold',\n    //         fontFamily:'Arial',\n    //         fontSize:25\n    //       }\n    //     },\n    //     tooltip: {\n    //       trigger: 'item',\n    //       axisPointer: {\n    //         type: 'cross'\n    //       }\n    //     },\n    //     legend: {\n    //       orient: 'horizontal',\n    //       x: 'center',\n    //       y: 'bottom',\n    //     },\n    //     grid: {\n    //       left: '6%',\n    //       right: '7%',\n    //       top:'20%',\n    //       bottom: '12%',\n    //       containLabel: true\n    //     },\n    //     toolbox: {\n    //         show: true,\n    //         //toolbox的配置项\n    //         feature: {\n    //             //辅助线的开关\n    //             mark: { show: true },\n    //             //动态类型切换\n    //             magicType: {\n    //                 show: true,\n    //                 //line为折线图，bar为柱状图\n    //                 type: ['line', 'bar']\n    //             },\n    //             //将图标保存为图片\n    //             saveAsImage: { show: true }\n    //         }\n    //     },\n    //     calculable: true,\n    //     xAxis: {\n    //       name: 'Date',\n    //       type: 'time',\n    //       //数值起始和结束两端空白策略\n    //       boundaryGap: false,\n    //       axisLabel: {        \n    //           show: true,\n    //           textStyle: {\n    //               color: 'green',\n    //               fontSize:'13',\n    //               fontWeight:'bold'\n    //           }\n    //       },\n    //       axisLine:{\n    //         lineStyle:{\n    //           color:'black',\n    //           width:2,   //这里是坐标轴的宽度,可以去掉\n    //         }\n    //       }\n    //     },\n    //     yAxis: {\n    //       name: 'Quantity (10000 tons)',\n    //       type: 'value',\n    //       axisLabel: {        \n    //           show: true,\n    //           textStyle: {\n    //               color: 'black',\n    //               fontSize:'10'\n    //           }\n    //       },\n    //       axisLine:{\n    //         lineStyle:{\n    //           color:'black',\n    //           width:2,\n    //         }\n    //       }\n    //     },\n    //     series: [\n    //       { name: 'paddy', data: [], type: 'line'},\n    //       { name: 'potato', data: [], type: 'line'},\n    //       { name: 'soybean', data: [], type: 'line'},\n    //       { name: 'peanut', data: [], type: 'line'},\n    //       { name: 'wheat', data: [], type: 'line'},\n    //       { name: 'barley', data: [], type: 'line'},\n    //     ]\n    //   };\n    //   this.request.get(\"/soil/chart\", {\n    //       params:{\n    //         beginDate: this.chartDateVal[0],\n    //         endDate: this.chartDateVal[1],\n    //       }\n    //   }).then(res => {\n    //     priceOption.series[0].data = res.data[0].map(v => [v.date, v.unitPrice])\n    //     priceOption.series[1].data = res.data[1].map(v => [v.date, v.unitPrice])\n    //     priceOption.series[2].data = res.data[2].map(v => [v.date, v.unitPrice])\n    //     priceOption.series[3].data = res.data[3].map(v => [v.date, v.unitPrice])\n    //     priceOption.series[4].data = res.data[4].map(v => [v.date, v.unitPrice])\n    //     priceOption.series[5].data = res.data[5].map(v => [v.date, v.unitPrice])\n    //     trendOption.series[0].data = res.data[0].map(v => [v.date, v.demand - v.supply])\n    //     trendOption.series[1].data = res.data[1].map(v => [v.date, v.demand - v.supply])\n    //     trendOption.series[2].data = res.data[2].map(v => [v.date, v.demand - v.supply])\n    //     trendOption.series[3].data = res.data[3].map(v => [v.date, v.demand - v.supply])\n    //     trendOption.series[4].data = res.data[4].map(v => [v.date, v.demand - v.supply])\n    //     trendOption.series[5].data = res.data[5].map(v => [v.date, v.demand - v.supply])\n    //     priceChart.setOption(priceOption);\n    //     trendChart.setOption(trendOption);\n    //   })\n    // },\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","tableData","total","currentPage","pageSize","form","multipleSelection","dialogFormVisible","rules","date","required","message","trigger","compaction","soilTemperature","ph","water","nitrogen","phosphorus","chartDateVal","dateVal","pickerOptions","shortcuts","text","onClick","picker","start","watch","val","created","methods","getFormatDate","offset","month","strDate","rowClass","loadPage","params","beginDate","endDate","then","handleSizeChange","handleCurrentChange","handleAdd","save","handleEdit","row","del","id","handleSelectionChange","delBatch","reset","cancel","formCancel"],"sourceRoot":"src/views","sources":["Soil.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-form :inline=\"true\" class=\"demo-form-inline\" style=\"text-align: center;\">\r\n      <el-form-item>\r\n        <el-date-picker\r\n          v-model=\"chartDateVal\"\r\n          type=\"daterange\"\r\n          unlink-panels\r\n          range-separator=\"to\"\r\n          start-placeholder=\"Begin date\"\r\n          end-placeholder=\"End date\"\r\n          value-format=\"yyyy-MM-dd\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button class=\"ml-5\" type=\"primary\" @click=\"getChart\" icon=\"el-icon-search\">Search</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    \r\n    <el-row :gutter=\"10\" style=\"margin-bottom: 40px;\">\r\n      <el-col :span=\"24\" >\r\n        <el-card id=\"price\" style=\"height: 500px;\" class=\"chart\"></el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-form :inline=\"true\" class=\"demo-form-inline\">\r\n      <el-form-item prop=\"date\">\r\n        <el-date-picker\r\n          v-model=\"dateVal\"\r\n          type=\"daterange\"\r\n          unlink-panels\r\n          range-separator=\"to\"\r\n          start-placeholder=\"Begin date\"\r\n          end-placeholder=\"End date\"\r\n          :picker-options=\"pickerOptions\"\r\n          value-format=\"yyyy-MM-dd\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button class=\"ml-5\" type=\"primary\" @click=\"loadPage\" icon=\"el-icon-search\">Search</el-button>\r\n        <el-button class=\"ml-5\" type=\"warning\" @click=\"reset\" icon=\"el-icon-refresh\">Reset</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n\r\n    <div style=\"margin: 10px 0;\">\r\n      <el-button type=\"primary\" @click=\"handleAdd\">Add <i class=\"el-icon-circle-plus-outline\"></i></el-button>\r\n      <el-popconfirm\r\n        class=\"ml-5\"\r\n        confirm-button-text='DELETE'\r\n        cancel-button-text='CANCEL'\r\n        icon=\"el-icon-info\"\r\n        icon-color=\"red\"\r\n        title=\"Are you sure you want to delete these data?\"\r\n        @confirm=\"delBatch\"\r\n        @cancel=\"cancel\"\r\n      >\r\n      <el-button type=\"danger\" slot=\"reference\">Delete in bulk <i class=\"el-icon-remove-outline\"></i></el-button>\r\n      </el-popconfirm>\r\n    </div>\r\n\r\n    <el-table \r\n      :data=\"tableData\" \r\n      :default-sort = \"{prop: 'date', order: 'descending'}\" \r\n      border \r\n      stripe \r\n      :header-cell-style=\"{ textAlign: 'center', background:'beige' }\" \r\n      :cell-style=\"rowClass\"\r\n      @selection-change=\"handleSelectionChange\">\r\n      \r\n      <div slot=\"empty\" style=\"text-align: left;\">\r\n        <el-empty description=\"Sorry, there is no data you are looking for\" />\r\n      </div>\r\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n      <el-table-column prop=\"date\" label=\"Date\" sortable width=\"100\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"compaction\" label=\"Force to Penetrate the Soil (N)\" width=\"220px\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"soilTemperature\" label=\"Soil Temperature (°C)\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"ph\" label=\"PH\" width=\"60px\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"water\" label=\"Water Content (%)\" >\r\n      </el-table-column>\r\n      <el-table-column prop=\"nitrogen\" label=\"Nitrogen Content (%)\" >\r\n      </el-table-column>\r\n      <el-table-column prop=\"phosphorus\" label=\"Phosphorus Content (%)\" >\r\n      </el-table-column>\r\n      <el-table-column prop=\"option\" label=\"Operation\" width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"success\" @click=\"handleEdit(scope.row)\">Edit <i class=\"el-icon-edit\"></i></el-button>\r\n          <el-popconfirm\r\n            class=\"ml-5\"\r\n            confirm-button-text='DELETE'\r\n            cancel-button-text='CANCEL'\r\n            icon=\"el-icon-info\"\r\n            icon-color=\"red\"\r\n            title=\"Are you sure to delete?\"\r\n            @confirm=\"del(scope.row.id)\"\r\n            @cancel=\"cancel\"\r\n          >\r\n          <el-button type=\"danger\" slot=\"reference\">Delete <i class=\"el-icon-remove-outline\"></i></el-button>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <div style=\"padding: 10px 0;\">\r\n      <el-pagination\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"currentPage\"\r\n        :page-sizes=\"[5, 10, 20, this.total]\"\r\n        :page-size=pageSize\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :total=\"total\">\r\n      </el-pagination>\r\n    </div>\r\n\r\n    <el-dialog title=\"Soil Condition\" :visible.sync=\"dialogFormVisible\" width=\"40%\" center>\r\n      <el-form label-width=\"auto\" size=\"small\" :model=\"form\" :rules=\"rules\" ref=\"soilForm\">\r\n        <el-form-item label=\"Date\" prop=\"date\">\r\n          <el-col :span=\"11\">\r\n            <el-date-picker type=\"date\" placeholder=\"select date\" v-model=\"form.date\" style=\"width: 100%;\" value-format=\"yyyy-MM-dd\"></el-date-picker>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"Force to Penetrate the Soil\" prop=\"compaction\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.compaction\" \r\n            autocomplete=\"off\" \r\n            placeholder=\"(N)\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Soil Temperature\" prop=\"soilTemperature\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.soilTemperature\" \r\n            autocomplete=\"off\" \r\n            placeholder=\"(°C)\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Soil pH\" prop=\"ph\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.ph\" \r\n            autocomplete=\"off\" \r\n            placeholder=\"\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Water Content\" prop=\"water\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.water\" \r\n            autocomplete=\"off\" \r\n            placeholder=\"(%)\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Nitrogen Content\" prop=\"nitrogen\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.nitrogen\"\r\n            autocomplete=\"off\" \r\n            placeholder=\"(%)\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phosphorus Content\" prop=\"phosphorus\">\r\n          <el-input \r\n            type=\"number\" \r\n            v-model.number=\"form.phosphorus\" \r\n            autocomplete=\"off\" \r\n            placeholder=\"(%)\"\r\n            onKeypress=\"return (/[[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?]/.test(String.fromCharCode(event.keyCode)))\">\r\n          </el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"formCancel\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">Confirm</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import * as echarts from 'echarts'; \r\n  export default {\r\n    name:\"Soil\",\r\n    data() {\r\n      return {\r\n        tableData: [],\r\n        total:0,\r\n        currentPage:1,\r\n        pageSize:5,\r\n        form:{},\r\n        multipleSelection: [],\r\n        dialogFormVisible: false,\r\n\r\n        rules: {\r\n          date: [ {required: true, message: 'Please choose the date', trigger: 'blur'},],\r\n          compaction: [{required: true, message: 'Please input the force to penetrate the soil', trigger: 'blur'},],\r\n          soilTemperature: [{required: true, message: 'Please input the soil temperature', trigger: 'blur'},],\r\n          ph: [{required: true, message: 'Please input the soil pH', trigger: 'blur'},],\r\n          water: [{required: true, message: 'Please input the water content', trigger: 'blur'},],\r\n          nitrogen: [{required: true, message: 'Please input the nitrogen content', trigger: 'blur'},],\r\n          phosphorus: [{required: true, message: 'Please input the phosphorus content', trigger: 'blur'},],\r\n        },\r\n\r\n        chartDateVal:[],\r\n\r\n        dateVal:[],\r\n        pickerOptions: {\r\n          shortcuts: [{\r\n            text: 'within 7 days',\r\n            onClick(picker) {\r\n              const end = new Date();\r\n              const start = new Date();\r\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\r\n              picker.$emit('pick', [start, end]);\r\n            }\r\n          }, {\r\n            text: 'within 30 days',\r\n            onClick(picker) {\r\n              const end = new Date();\r\n              const start = new Date();\r\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\r\n              picker.$emit('pick', [start, end]);\r\n            }\r\n          }, {\r\n            text: 'within 90 days',\r\n            onClick(picker) {\r\n              const end = new Date();\r\n              const start = new Date();\r\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\r\n              picker.$emit('pick', [start, end]);\r\n            }\r\n          }]\r\n        },\r\n      }\r\n    },\r\n    watch:{\r\n      dateVal(val){\r\n        if(val == null) this.dateVal = ''\r\n      },\r\n      chartDateVal(val){\r\n        if(val == null) this.chartDateVal = ''\r\n      }\r\n    },\r\n    created() {\r\n      this.loadPage()\r\n    },\r\n    // mounted() {\r\n    //   this.chartDateVal[0] = this.getFormatDate(1)\r\n    //   this.chartDateVal[1] = this.getFormatDate(0)\r\n    //   this.getChart()\r\n    // },\r\n    methods: {\r\n      getFormatDate(offset) {\r\n          var date = new Date()\r\n          var seperator1 = '-'\r\n          var year = date.getFullYear() - offset\r\n          var month = date.getMonth() + 1\r\n          var strDate = date.getDate()\r\n          if (month >= 1 && month <= 9) {\r\n            month = '0' + month\r\n          }\r\n          if (strDate >= 0 && strDate <= 9) {\r\n            strDate = '0' + strDate\r\n          }\r\n          var currentdate = year + seperator1 + month + seperator1 + strDate\r\n          return currentdate\r\n      },\r\n      rowClass(){\r\n        return \"text-align:center\"\r\n      },\r\n      loadPage(){\r\n        this.request.get(\"/soil/page\", {\r\n          params:{\r\n            currentPage: this.currentPage,\r\n            pageSize: this.pageSize,\r\n            beginDate:this.dateVal[0],\r\n            endDate:this.dateVal[1],\r\n          }\r\n        }).then(res => {\r\n            this.tableData = res.data.records\r\n            this.total = res.data.total\r\n            let maxPage = parseInt((this.total - 1) / this.pageSize + 1);\r\n            if(this.currentPage > maxPage){\r\n              this.currentPage = maxPage\r\n            }\r\n          })\r\n      },\r\n      handleSizeChange(pageSize){\r\n        this.pageSize = pageSize\r\n        this.loadPage()\r\n      },\r\n      handleCurrentChange(currentPage){\r\n        this.currentPage = currentPage\r\n        this.loadPage()\r\n      },\r\n      handleAdd(){\r\n        this.dialogFormVisible = true\r\n\r\n        this.form = {}\r\n      },\r\n      save(){\r\n        this.$refs['soilForm'].validate((valid) => {\r\n            if (valid) {  // Form validation is valid\r\n              this.request.post(\"/soil\", this.form).then(res => {\r\n                if(res.code === 200){\r\n                  this.$message.success(\"Successfully saved\")\r\n                  this.dialogFormVisible = false;\r\n                  this.loadPage()\r\n                }else{\r\n                  this.$message.error(\"Failed to save, please try again\")\r\n                }\r\n              })\r\n            }else{\r\n              this.$message.error(\"Failed to save, please check that your data meets the requirements\")\r\n            }\r\n        });\r\n      },\r\n      handleEdit(row){\r\n        this.form = Object.assign({}, row) \r\n        this.dialogFormVisible = true\r\n      },\r\n      del(id){\r\n        this.request.delete(\"/soil/\" + id).then(res => {\r\n          if(res.code === 200){\r\n            this.$message.success(\"Successfully deleted\")\r\n            this.loadPage()\r\n          }else{\r\n            this.$message.error(\"Failed to delete\")\r\n          }\r\n        })\r\n      },\r\n      handleSelectionChange(val){\r\n        this.multipleSelection = val\r\n      },\r\n      delBatch(){\r\n        let ids = this.multipleSelection.map(v => v.id)\r\n        this.request.post(\"/soil/batchDel\", ids).then(res => {\r\n          if(res.code === 200){\r\n            this.$message.success(\"Successfully deleted\")\r\n            this.loadPage()\r\n          }else{\r\n            this.$message.error(\"Failed to delete\")\r\n          }\r\n        })\r\n      },\r\n      reset(){\r\n        this.dateVal= \"\",\r\n        this.currentPage = 1;\r\n        this.loadPage()\r\n      },\r\n      cancel(){\r\n        this.$message.warning(\"Operation successfully canceled\")\r\n      },\r\n      formCancel(){\r\n        this.dialogFormVisible = false\r\n        this.$message.warning(\"Form submission canceled\")\r\n      },\r\n      // getChart() {\r\n      //   var priceChartDom = document.getElementById('price');\r\n      //   var priceChart = echarts.init(priceChartDom);\r\n\r\n      //   var trendChartDom = document.getElementById('trend');\r\n      //   var trendChart = echarts.init(trendChartDom);\r\n\r\n      //   var priceOption = {\r\n      //     title: {\r\n      //       text: 'Unit Price of Crops',\r\n      //       left: 'center',\r\n      //       textStyle:{\r\n      //         fontStyle:'normal',\r\n      //         fontWeight:'bold',\r\n      //         fontFamily:'Arial',\r\n      //         fontSize:25\r\n      //       }\r\n      //     },\r\n      //     tooltip: {\r\n      //       trigger: 'item',\r\n      //       axisPointer: {\r\n      //         type: 'cross'\r\n      //       }\r\n      //     },\r\n      //     legend: {\r\n      //       orient: 'horizontal',\r\n      //       x: 'center',\r\n      //       y: 'bottom'\r\n      //     },\r\n      //     grid: {\r\n      //       left: '5%',\r\n      //       right: '7%',\r\n      //       top:'15%',\r\n      //       bottom: '12%',\r\n      //       containLabel: true\r\n      //     },\r\n      //     toolbox: {\r\n      //         show: true,\r\n      //         //toolbox的配置项\r\n      //         feature: {\r\n      //             //辅助线的开关\r\n      //             mark: { show: true },\r\n      //             //动态类型切换\r\n      //             magicType: {\r\n      //                 show: true,\r\n      //                 //line为折线图，bar为柱状图\r\n      //                 type: ['line', 'bar']\r\n      //             },\r\n      //             //将图标保存为图片\r\n      //             saveAsImage: { show: true }\r\n      //         }\r\n      //     },\r\n      //     calculable: true,\r\n      //     xAxis: {\r\n      //       name: 'Date',\r\n      //       type: 'time',\r\n            \r\n      //       //数值起始和结束两端空白策略\r\n      //       // boundaryGap: false,\r\n      //       axisLabel: {        \r\n      //           show: true,\r\n      //           textStyle: {\r\n      //               color: 'green',\r\n      //               fontSize:'13',\r\n      //               fontWeight:'bold'\r\n      //           }\r\n      //       },\r\n      //       axisLine:{\r\n      //         lineStyle:{\r\n      //           color:'black',\r\n      //           width:2,\r\n      //         }\r\n      //       },\r\n      //     },\r\n      //     yAxis: {\r\n      //       name: 'Price (GBP per ton)',\r\n      //       type: 'value',  \r\n      //       // splitLine: {\r\n      //       //     lineStyle: {\r\n      //       //       color: ['#eee']\r\n      //       //     }\r\n      //       // },\r\n      //       axisLabel: {        \r\n      //           show: true,\r\n      //           textStyle: {\r\n      //               color: 'black',\r\n      //               fontSize:'10',\r\n      //           }\r\n      //       },\r\n      //       axisLine:{\r\n      //         lineStyle:{\r\n      //           color:'black',\r\n      //           width:2,\r\n      //         }\r\n      //       }      \r\n      //     },\r\n      //     series: [\r\n      //       { name: 'paddy', data: [], type: 'line'},\r\n      //       { name: 'potato', data: [], type: 'line'},\r\n      //       { name: 'soybean', data: [], type: 'line'},\r\n      //       { name: 'peanut', data: [], type: 'line'},\r\n      //       { name: 'wheat', data: [], type: 'line'},\r\n      //       { name: 'barley', data: [], type: 'line'},\r\n      //     ]\r\n      //   };\r\n\r\n      //   var trendOption = {\r\n      //     title: {\r\n      //       text: 'Demand and Production Comparison',\r\n      //       subtext: 'demand minus supply (local market)',\r\n      //       left: 'center',\r\n      //       textStyle:{\r\n      //         fontStyle:'normal',\r\n      //         fontWeight:'bold',\r\n      //         fontFamily:'Arial',\r\n      //         fontSize:25\r\n      //       }\r\n      //     },\r\n      //     tooltip: {\r\n      //       trigger: 'item',\r\n      //       axisPointer: {\r\n      //         type: 'cross'\r\n      //       }\r\n      //     },\r\n      //     legend: {\r\n      //       orient: 'horizontal',\r\n      //       x: 'center',\r\n      //       y: 'bottom',\r\n      //     },\r\n      //     grid: {\r\n      //       left: '6%',\r\n      //       right: '7%',\r\n      //       top:'20%',\r\n      //       bottom: '12%',\r\n      //       containLabel: true\r\n      //     },\r\n      //     toolbox: {\r\n      //         show: true,\r\n      //         //toolbox的配置项\r\n      //         feature: {\r\n      //             //辅助线的开关\r\n      //             mark: { show: true },\r\n      //             //动态类型切换\r\n      //             magicType: {\r\n      //                 show: true,\r\n      //                 //line为折线图，bar为柱状图\r\n      //                 type: ['line', 'bar']\r\n      //             },\r\n      //             //将图标保存为图片\r\n      //             saveAsImage: { show: true }\r\n      //         }\r\n      //     },\r\n      //     calculable: true,\r\n      //     xAxis: {\r\n      //       name: 'Date',\r\n      //       type: 'time',\r\n      //       //数值起始和结束两端空白策略\r\n      //       boundaryGap: false,\r\n      //       axisLabel: {        \r\n      //           show: true,\r\n      //           textStyle: {\r\n      //               color: 'green',\r\n      //               fontSize:'13',\r\n      //               fontWeight:'bold'\r\n      //           }\r\n      //       },\r\n      //       axisLine:{\r\n      //         lineStyle:{\r\n      //           color:'black',\r\n      //           width:2,   //这里是坐标轴的宽度,可以去掉\r\n      //         }\r\n      //       }\r\n      //     },\r\n      //     yAxis: {\r\n      //       name: 'Quantity (10000 tons)',\r\n      //       type: 'value',\r\n      //       axisLabel: {        \r\n      //           show: true,\r\n      //           textStyle: {\r\n      //               color: 'black',\r\n      //               fontSize:'10'\r\n      //           }\r\n      //       },\r\n      //       axisLine:{\r\n      //         lineStyle:{\r\n      //           color:'black',\r\n      //           width:2,\r\n      //         }\r\n      //       }\r\n      //     },\r\n      //     series: [\r\n      //       { name: 'paddy', data: [], type: 'line'},\r\n      //       { name: 'potato', data: [], type: 'line'},\r\n      //       { name: 'soybean', data: [], type: 'line'},\r\n      //       { name: 'peanut', data: [], type: 'line'},\r\n      //       { name: 'wheat', data: [], type: 'line'},\r\n      //       { name: 'barley', data: [], type: 'line'},\r\n      //     ]\r\n      //   };\r\n      //   this.request.get(\"/soil/chart\", {\r\n      //       params:{\r\n      //         beginDate: this.chartDateVal[0],\r\n      //         endDate: this.chartDateVal[1],\r\n      //       }\r\n      //   }).then(res => {\r\n      //     priceOption.series[0].data = res.data[0].map(v => [v.date, v.unitPrice])\r\n      //     priceOption.series[1].data = res.data[1].map(v => [v.date, v.unitPrice])\r\n      //     priceOption.series[2].data = res.data[2].map(v => [v.date, v.unitPrice])\r\n      //     priceOption.series[3].data = res.data[3].map(v => [v.date, v.unitPrice])\r\n      //     priceOption.series[4].data = res.data[4].map(v => [v.date, v.unitPrice])\r\n      //     priceOption.series[5].data = res.data[5].map(v => [v.date, v.unitPrice])\r\n\r\n      //     trendOption.series[0].data = res.data[0].map(v => [v.date, v.demand - v.supply])\r\n      //     trendOption.series[1].data = res.data[1].map(v => [v.date, v.demand - v.supply])\r\n      //     trendOption.series[2].data = res.data[2].map(v => [v.date, v.demand - v.supply])\r\n      //     trendOption.series[3].data = res.data[3].map(v => [v.date, v.demand - v.supply])\r\n      //     trendOption.series[4].data = res.data[4].map(v => [v.date, v.demand - v.supply])\r\n      //     trendOption.series[5].data = res.data[5].map(v => [v.date, v.demand - v.supply])\r\n\r\n\r\n      //     priceChart.setOption(priceOption);\r\n      //     trendChart.setOption(trendOption);\r\n      //   })\r\n       \r\n      // },\r\n    },\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .chart {\r\n    background-image: linear-gradient(to top, #1c92d2 0%, #f2fcfe 100%);\r\n    overflow: hidden;\r\n  };\r\n</style>"]},"metadata":{},"sourceType":"module"}